# STORAGE (~1) `0
set (0) to 32(space)
>> ++++
[ - < ++++++++ > ] <
dupe (0) to (1)
:
[ - > + > + ; ]
>> :
[ - << + ; ]
set (1) to 48(ascii 0)
++
[ - < ++++++++ > ]
# PARAMS(~1) `1
> :
store STORAGE(0)
<<< |
set (0) to 1
+
read chars until next space
[
    > ,
    dupe STORAGE(1) to RAM(0)
    > | [ - | + > + < | ] |
    > [ - | + | ] <<
    subtract RAM(0) from cursor
    > [ - < - > ] <
] 
# PARAMS(~2) `2
> 
set (0) to 1
+
read chars until eof
[
    > ,
] 
dupe STORAGE(0) to RAM(0)
> | [ - | + > + < | ] |
> [ - | + | ] <<
store RAM(0)
> : <
goto start
< [<]
subtract RAM(0) from all chars
>> [ 
    subtract RAM(0) from cursor, copying to RAM(0)
    | [ - > + < | - | ]
    move RAM(1) back to RAM(0)
    > [ - < + > ] <
    | >
] 
# PROGRAM (~1) `3
> [-]
set (0) to representation.length (base)
: << [<] >>
[ | + | > ] |

store RAM(1)
>> : <<
generate indexes
<< [<] < [<] >
[ >
    [ - | + > + < | ]
    | > [ - | + | ]

    | [>] >>
    [ - | + > + < | ]
    | > [ - | + | ]?
    subtract RAM(1) from RAM(0)
    < [ - < - > ]
    < [ >> + << [-] ]
    ?
    >>>
] 
?
